tomcat+petclinic:::::
========================
!/bin/bash
uname -a
yum install zip unzip telnet wget -y
sleep 5
cd /opt
wget -c --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.rpm
rpm -ivh jdk-8u131-linux-x64.rpm
cd -
mkdir -p /opt/tomcat
mkdir -p /tmp/tomcatpackage
cd /tmp/tomcatpackage
wget http://redrockdigimark.com/apachemirror/tomcat/tomcat-8/v8.5.30/bin/apache-tomcat-8.5.30-windows-x64.zip
cp -r * /opt/tomcat
cd /opt/tomcat
unzip apache-tomcat-8.5.30-windows-x64.zip
cd /opt/tomcat/apache-tomcat-8.5.30
chmod 755 bin
./startup.sh
ps -ef | grep tomcat
netstat -anlp | grep ":8080"
cd /opt/tomcat/webapps
wget http://cliqr-appstore.s3.amazonaws.com/petclinic/petclinic.war
cd /tmp
wget http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm
rpm -ivh mysql57-community-release-el7-7.noarch.rpm
yum install mysql-server*
sudo su -
service mysqld start
ps -ef | grep mysql
service mysqld status
netstat -anlp | grep ":3306"
#Setting up mysql as in startup service
chkconfig mysqld on
# get auto generated password from log file
echo "extracting password from log file: ${MYSQL_LOG_FILE}..."
MYSQL_PWD=$(grep -oP '(?<=A temporary password is generated for root@localhost: )[^ ]+' ${MYSQL_LOG_FILE})
# echo "Auto generated password is: ${MYSQL_PWD}"

# install expect program to interact with mysql program
yum install -y expect

MYSQL_UPDATE=$(expect -c "
set timeout 5
spawn mysql -u root -p
expect \"Enter password: \"
send \"${MYSQL_PWD}\r\"
expect \"mysql>\"
#may be err wt !
send \"ALTER USER 'root'@'localhost' IDENTIFIED BY 'MySQL!';\r\"
expect \"mysql>\"
send \"uninstall plugin validate_password;\r\"
expect \"mysql>\"
send \"ALTER USER 'root'@'localhost' IDENTIFIED BY '';\r\"
expect \"mysql>\"
send \"CREATE USER 'ec2-user'@'localhost';\r\"
expect \"mysql>\"
send \"quit;\r\"
expect eof
")

echo "$MYSQL_UPDATE"
mysql -h localhost -u root -p









connecting to the servers throug the name
========================================

#!/bin/bash
echo "connecting to servers"
echo "enter the server name which you want to connect"
read servername
ssh -i /root/sshlogin.pem ec2-user@$servername



alias commands(login to the server with out executing the script)(after done the above script)(update the bashrc filr)
=======================================================================================================================

vi .bashrc
alias sshlogin='/root/scripts/hostname.sh'
source .bashrc



changing the hostname 
======================
Dynamically changing the servername with shell script
#!/bin/bash
echo "Enter your hostname"
read servername
echo "you are going to set hostname is $servername"
echo "$servername" >/etc/hostname
#privateip=$((ifconfig eth0 | grep -w 'inet' | awk '{print $2}'))
privateip=$(hostname -I)
echo "$privateip $servername" >>/etc/hosts
hostname -F /etc/hostname
echo "your servername is :`hostname` "
echo "your servername is :$HOSTNAME "
~


apache website automation with template
=======================================


#!/bin/bash
uname -a
yum install zip unzip httpd -y
sleep 5
echo "package installed successfully"
mkdir -p /tmp/website
cd /tmp/website
wget http://www.free-css.com/assets/files/free-css-templates/download/page226/company.zip
echo "downloaded the image file successfully"
unzip company.zip
cd /var/www/html
rm -rf*
ls-ltr
cd /tmp/website
cp -r * /var/www/html
ls -ltr
systemctl enable httpd
echo "started the all os level services"
netstat -anlp |grep ":80"
telnet 18.219.180.46 80
systemctl start httpd
ps -ef | grep httpd
echo "apache started"
~
~



nginx with template
===================
#!/bin/bash
cd /root
wget http://www.free-css.com/assets/files/free-css-templates/download/page226/company.zip
echo "downloaded the image file successfully"
unzip company.zip
rm -rf * /usr/share/nginx/html
cp -r * /usr/share/nginx/html
cd /usr/share/nginx/html
ls-ltr
cd~
syatemctl stop nginx
ps -ef | grep nginx
systemctl start nginx.service
ps -ef | grep nginx


installation of tomcat
========================

!/bin/bash
uname -a
yum install zip unzip telnet wget -y
sleep 5
cd /opt
wget -c --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.rpm
cd -
mkdir -p /opt/tomcat
mkdir -p /tmp/tomcatpackage
cd /tmp/tomcatpackage
wget http://redrockdigimark.com/apachemirror/tomcat/tomcat-8/v8.5.30/bin/apache-tomcat-8.5.30-windows-x64.zip
cp -r * /opt/tomcat
cd /opt/tomcat
unzip apache-tomcat-8.5.30-windows-x64.zip
cd /opt/tomcat/apache-tomcat-8.5.30
chmod 700 bin
./startup.sh
ps -ef | grep tomcat




********tomcat installation with jenkins
===========================================
    !/bin/bash
	cd /opt
    sudo yum install wget unzip -y
     sudo sudo wget --no-check-certificate -c --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-linux-x64.rpm
    sudo rpm -ivh jdk-8u171-linux-x64.rpm
    sudo wget http://www-eu.apache.org/dist/tomcat/tomcat-8/v8.5.31/bin/apache-tomcat-8.5.31.zip
    sudo unzip apache-tomcat-8.5.31.zip
    sudo mv apache-tomcat-8.5.31 tomcat
    sudo chown -R devopsadmin.devopsadmin tomcat
    cd tomcat
    sudo chmod -R 700 bin
	cd opt
	 sudo wget https://updates.jenkins-ci.org/download/war/2.118/jenkins.war
	 cp jenkins.war /opt/tomcat/webapps
    cd /opt/tomcat/bin
    ./startup.sh
     ps -ef |grep tomcat
	 
	 
	 
	 






ansible installation by enabling the epel(download rpm package and do rpm -ivh packagename)
============================================================================================
#!/bin/bash
	cd /tmp
	mkdir ansiblepackage
	cd ansiblepackage
	echo "enabling the epel and downloading the rpm pack of ansible"
	wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
        rpm -ivh epel-release-latest-7.noarch.rpm          
	cd /root
	yum install wget -y
	mkdir ansible
	cd ansible
	rm -r * .rpm
	ll
	echo "installing the ansible"
	yum install ansible -y
	echo "installed ansible"
	ansible --version
	
	
	
	
	         (or)
	rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm 
	         (or)
        wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
	sudo yum install epel-release-latest-7.noarch.rpm
	
	
	
	
	
	
	nginx installation
	==================
	
	
       #!/bin/bash
       yum install zip unzip telnet wget curl -y
       sleep 5
       echo "packages installed successfully"
       cd /root
       yum install nginx -y
       echo "nginx installed succesfully"
       rm -rf * /usr/share/nginx/html        (create nginx.html file wt content/image)
       cd /usr/share/nginx/html
       ls-ltr
       cd~
       systemctl enable nginx.service
       systemctl start nginx.service
	
	
	
	
	aws cli(for aws)(s3 to aws)
	===========================
	
	
        aws cli
        =======
        #!/bin/bash
        #Installing the aws cli
        yum install unzip -y
        curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
        unzip awscli-bundle.zip
        sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
        echo "AWS Cli Installation completed"




        to connect to the no.of servers
	================================
	
	
	#!/bin/bash

        oslist=filename

        for serername in `cat /opt/scripts/serverlist`
        #Connecting to remote servers

        ssh devopsadmin@$servername
        #redirecting output of uname into filename
        uname >>$oslist

        done

        #priting the os list file
        cat $oslist
        #send the email with subject with attachment(filename)
        mail -s "OS lists" someone@somewhere.com -a $oslist


        o/p:
        ====





        ping 
        ====

        #!/bin/sh
 
        # -q quiet
        # -c nb of pings to perform
        echo "enter the name"
        read name
        ping -q -c5 $name > /dev/null
       
        #check previous command successful or not
        if  [$? -eq 0 ]
        then
        echo "ok"
        fi



        o/p:
        ====

        enter the name
        google.com
        ok




        ping with multiple websites
        ============================


        #!/bin/bash
        webs=/home/devopsadmin/scripts/websites                                             or /serverslist

        for name in `cat $webs`; do 
        ping -q -c5 $name > /dev/null

        if [ $? -eq 0 ]; then
        echo "$name --> OK "
        else
        echo "$name-->FAIL"
        fi
        done




        o/p:
        =====

        www.google.com --> OK
        webserver-->FAIL
        nginx-->FAIL



        #!/bin/bash
        for i in `sec 0 255`; do 
        ping -c 1 $i >/dev/null 2>&1 
        if [ "$?" = "0" ]; then 
        echo -n "up" 
        else echo -n "down" 
        fi
        done


        o/p:
        =====
