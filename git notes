local server to github
======================
yum install git   -- to install the git(this is from the internet)
0r
we are having some pvt repo in pvt n/w from there we'll download and extract the package.

git version
which git----------to know the installed location
first we need to create one repository at GUI in github(remote)
git init -------to initialise the empty repository in local
mkdir dirname--- create a local repo name and same of remote repo
cd branchname
create a file in that branch only
vi index.html
vi index1.html
cat  "content" .>filename
echo "content" >filename(only one line of content)
execute all git commands in this directory only.
git add index.html            -- adding to workspace
git add f1 f2 f3----
git add .
git add *
git add -A
git status
git diff --staged ------------->This command shows the differences between the files in the staging area and the latest version present.
git diff 1stbranch 2ndbranch----------------->diff b/w these two branches
git reset [file] -------------------> This command unstages the file, but it preserves the file contents.
git reset [commit] --------------->This command undoes all the commits after the specified commit and preserves the changes locally.
git rm [file]  -------------->This command deletes the file from your working directory and stages the deletion.
git branch -d [branch name]  ----------------->This command deletes the feature branch.
git remote add [variable name] [Remote Server Link]  ------------------->This command is used to connect your local repository to the remote server.
git push â€“all [variable name]--------------->This command pushes all branches to your remote repository.
git commit -m "index.html"   -- adding to staging area
git commit -m f1 f2 f3 
git show commitid-----------------------if we commit 2 or more files at a time those commits will be in 1 commit id to see that
git reset --soft commitid--------------local repo -----staging area
git reset --head f1 -----------------staging area ----------work space
git reset --mixed commitid-----------local repo ---------work space
git config --global user.name "swapnapriyag"
git config --global user.email "ramumca05@gmail.com"  --------------- give remote repo details to for the connectivity.
git config --list  ------------to check configuration has done properly or not
git remote add origin https://github.com/swapnapriyag/branchname.git  -- --------to add on remote repo(If you haven't connected your local repository to a remote server, add the server to be able to push to it)       
List all currently configured remote repositories ----------------git remote -v
git push -u origin master     -- to push from local repo to remote repo
git push
git push path branch name
git remote show------------------------------to see the remote branches
git pull giturl
git clone giturl
clone=pull+merge
git --list     ----------------------------all available files in local repo
git log---------------to see list of commits
git log --oneline
git log -n----------------------no   eg::::: git log -2-----------------displays latest 2 logs
git log --oneline -n------------------------git log --oneline -2
#if i want to check author wise logs
git log --author=username-------------swapnapriyag
git log --author=username --oneline -4--------------
#today logs only(since also)
git log --since=yy-mm-dd--------------2017-12-18
git log --untill=yy-mm-dd-------------till date logs
git show commitid-----------------how many files are commited at single commit
git push origin --delete [branch name]	Delete a remote branch


git add index1.html         
git commit -m "index1.html"
git bisect-------------it'll allows you to affending commit and we can find out a commit
                        where the code works properly and a commit where it does not.
                        you don't have to trace the offending commit by handthat git bisect do that for you.
git push -u origin master
git remote -v----------->to see the git url

git branch                     -- to know the brach
git checkout -b newbranchname  -- to create the new branch and goes inside the branch
git checkout branchname        -- switch the brach
git history                    -- to know the history of git
git rebase                     -- set of commits, copies stores at out side of repo
git rebase branchname          -- current branch is up to date
git reset --head branchname    -- if we done any changes we want to go back 
git stash                      -- what ever uncommitted files those goes to stash
git stash list                 -- 
git stash show                 -- 
git stash apply                -- i have fixed one bug if i'm ready to go what exactly
git revert                     -- to roll back to the previous version
git --merged                   -- shows merged files
git merg branchname            --merging the branches
git --no-merged                -- displays non merged files.
git log                        -- Show all commits what we have done.
git log --oneline             -- it'll go back one line
git log --before               -- according to date it discloses
git log --author
git log --online --decorate --graph --all
git tag                        -- Create, list, delete or verify a tag object signed with GPG
<feature> branch: $ git add    -- to crate child branch 
pull                           -- pull means only from remote to local
clone                          -- clone means everything code changes from local-remote-machine local---and it saves locally.
how to do merge::::::: switch to that branch in gui what ever branches we want to merge and select new pullrequest option and go inside
                       and select create pull request option and then select mergepullrequest and confirm merge
git diff -tree {hash}          -- displays in one commit how many files have changed for this perticular commit 
git show cid                  -- displays the list of files(howmany) in one commit
                  if we want to connect from cmd line to github generate the ssh-key------take public key-------go to github settings---update ssh management
                  launch the command
ssh -T username your company name.com
git remote -V                  -- to see the remote conf files(OR)to see the remote information
upstream------------when you cloned from the origin
downstream-----------is any project that integrates your work with the other works.

remote to local(github to server)
===================================
install git
git clone githuburl

 


 
github to server(updation b/w github and server)
================================================ 
 after done the git installation
change any file at the local of bastion and do add,commit,push,and check at github
go to nginx server do 
git clone giturl
git pull in that path only 




all commands in that path only

